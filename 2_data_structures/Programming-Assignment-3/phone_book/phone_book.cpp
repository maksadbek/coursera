#include <iostream>#include <vector>#include <string>#include <random>#include <list>using std::string;using std::vector;using std::cin;struct Query {  string type, name;  int number;};vector<Query> read_queries() {  int n;  cin >> n;  vector<Query> queries(n);  for (int i = 0; i < n; ++i) {    cin >> queries[i].type;    if (queries[i].type == "add")      cin >> queries[i].number >> queries[i].name;    else      cin >> queries[i].number;  }  return queries;}void write_responses(const vector<string>& result) {  for (size_t i = 0; i < result.size(); ++i)    std::cout << result[i] << "\n";}struct kv {  int k;  string v;};class Hashtbl {public:  Hashtbl() {    std::mt19937 rng;    rng.seed(std::random_device()());    std::uniform_int_distribution<std::mt19937::result_type> dist(0, 100);    m = 60;    p = 10000000;    a = dist(rng) + 1;    b = dist(rng);    data = std::vector<std::list<kv>>(m, std::list<kv>());  }    void add(int key, string val) {    kv kv;    kv.k = key;    kv.v = val;    find_and_set(kv);    return;  };  string find(int key) {    auto hashed_key = hash(key);    for(auto kv : data[hashed_key]) {      if(kv.k == key) {	return kv.v;      }    }    return "not found";  };  void find_and_set(kv kv) {    auto hashed_key = hash(kv.k);    for(auto &node: data[hashed_key]) {      if(node.k == kv.k) {	node.v = kv.v;	return;      }    }    data[hashed_key].push_back(kv);  };  void del(int key) {    auto hashed_key = hash(key);    std::list<kv> &list = data[hashed_key];        for(std::list<kv>::iterator it = list.begin(); it != list.end(); it++) {      if((*it).k == key) {	list.erase(it);	break;      }    }        return;  };  private:  std::vector<std::list<kv>> data;  int m, p, a, b;    int hash(int x) {    long long prepreh = a * x + b;    long long int preh = (a * x + b) % p;    int h = preh % m;    return h;  };};vector<string> fast_process_queries(const vector<Query>& queries) {  vector<string> result;  Hashtbl htbl = Hashtbl();    for(size_t i = 0; i < queries.size(); i++) {    if (queries[i].type == "add") {      htbl.add(queries[i].number, queries[i].name);    } else if (queries[i].type == "del") {      htbl.del(queries[i].number);    } else {      auto r = htbl.find(queries[i].number);      result.push_back(r);    }  }    return result;};int main() {  /*  auto phone_book = Hashtbl();  phone_book.add(911, "police");  phone_book.add(76213, "mom");  phone_book.add(76234, "bob");  std::cout << phone_book.find(911) << std::endl;  std::cout << phone_book.find(76213) << std::endl;  std::cout << phone_book.find(76234) << std::endl;  phone_book.add(911, "cops");  std::cout << phone_book.find(911) << std::endl;    phone_book.del(911);  std::cout << phone_book.find(911) << std::endl;    return 0;  */    write_responses(fast_process_queries(read_queries()));  return 0;}